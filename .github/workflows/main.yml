name: CI/CD Pipeline - Code Quality and Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    - name: 2. Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # cache dependencies

    - name: 3. Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
    
    - name: 4. Lint with ruff
      run: |
        source .venv/bin/activate
        ruff check .

    - name: 5. Test with pytest
      run: |
        source .venv/bin/activate
        pytest

  build-and-push-docker:
    needs: build-and-test # This job depends on the build-and-test job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Only run for pushes to main

    steps:
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    - name: 2. Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: 3. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 4. Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 5. Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./CLOUD/drawsguard-api-collector-fixed
        file: ./CLOUD/drawsguard-api-collector-fixed/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/drawsguard-api-collector:latest,${{ secrets.DOCKER_USERNAME }}/drawsguard-api-collector:${{ github.sha }}

  deploy-canary:
    name:  Canary Deployment
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    
    outputs:
      revision_url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    - name: 2. Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 3. Deploy Canary Revision to Cloud Run
      id: deploy
      uses: 'google-github-actions/deploy-cloudrun@v2'
      with:
        service: 'drawsguard-api-collector'
        project_id: '${{ secrets.GCP_PROJECT_ID }}'
        region: 'us-central1'
        image: 'docker.io/${{ secrets.DOCKER_USERNAME }}/drawsguard-api-collector:${{ github.sha }}'
        traffic_split: 'LATEST=5,STABLE=95' # Send 5% traffic to the new revision

  verify-canary:
    name: Verify Canary
    needs: deploy-canary
    runs-on: ubuntu-latest

    steps:
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    - name: 2. Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        
    - name: 3. Set up Google Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 4. Run Quality Gate Script
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_REGION: 'us-central1'
      run: |
        chmod +x scripts/quality_gate.sh
        ./scripts/quality_gate.sh
      
    - name: 5. Send Canary notification to Slack
      uses: rtCamp/action-slack-notify@v2
      if: success()

  promote-to-production:
    name: Promote to Production
    needs: verify-canary
    runs-on: ubuntu-latest
    environment: production # This creates a manual approval gate

    steps:
    - name: 1. Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 2. Promote Canary by shifting 100% traffic
      run: |
        gcloud run services update-traffic drawsguard-api-collector \
          --to-latest \
          --region=us-central1 \
          --project=${{ secrets.GCP_PROJECT_ID }}

    - name: 3. Send Production notification to Slack
      uses: rtCamp/action-slack-notify@v2
      if: success()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "âœ… Production Deployment Successful"
        SLACK_MESSAGE: "Commit ${{ github.sha }} is now live with 100% traffic."
        SLACK_COLOR: "good"
        SLACK_USERNAME: "CI/CD Bot"
        SLACK_ICON_EMOJI: ":rocket:"
